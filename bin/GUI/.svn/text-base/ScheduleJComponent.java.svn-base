package GUI;


import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Composite;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import javax.imageio.ImageIO;
import javax.swing.JComponent;

/**
 * JComponent to draw Gantt-charts of schedules.
 * 
 * @author Tony Wauters (tony.wauters@kahosl.be): the original code 
 * @author bert (bert.vanvreckem@gmail.com): changes for HFFSP instances
 * @author Yailen Martinez (yailenm@gmail.com): changes to load solution without validating the resulting schedule 
 */

public class ScheduleJComponent extends JComponent{
    

    private static final long serialVersionUID = -8215813460445276579L;

    Schedule schedule;
    Instance problemInstance;

    int border=30;
    int machineUnitHeight=30;
    private int gapBetweenMachines=20;
    int[][][] machineCapacities;

    Map <Integer,Integer> machineIdToCurrentYMap=new HashMap<Integer, Integer>();
    Map <JobGUI,Color> jobToColorMap=new HashMap<JobGUI, Color>();

    int axisUnit=10;
    double axisUnitPixels = 40;

    private RenderingHints renderHints;

    public ScheduleJComponent(Schedule schedule, Instance instance) {
        this.schedule=schedule;
        this.problemInstance=instance;
        renderHints = new RenderingHints(RenderingHints.KEY_ANTIALIASING,
                        RenderingHints.VALUE_ANTIALIAS_ON);
        renderHints.put(RenderingHints.KEY_RENDERING,
                RenderingHints.VALUE_RENDER_QUALITY);
    }

    public void update(Schedule schedule){
        this.schedule=schedule;
        repaint();
    }


    public void paint(Graphics g) {
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHints(renderHints);

        int timeHorizon=schedule.getMakespan();
        axisUnit = (int)((double)timeHorizon/((double)this.getWidth()/axisUnitPixels));
        if (axisUnit<1) axisUnit=1;
        double xScale=((double)(this.getWidth()-2*border))/(double)timeHorizon;

        drawMachines(g2d, timeHorizon, xScale);
        
//
////        // Draw release times
////        for (Machine mach : problemInstance.getMachineList()){
////            drawTimeBox(
////                    g2d, xScale, mach, 
////                    0, mach.getReleaseTime(),  // start/end time 
////                    Color.gray, Color.red,     // fill/border color
////                    true,                      // this is idle time
////                    "R"+mach.getId());         // label
////        }
//        
        // Draw schedule
        for (OperationAllocation operAlloc : schedule.getAllocations()) {
            drawAllocation(g2d, xScale, operAlloc);
        }
        
        // Draw timeline
        int axisY=border+(machineUnitHeight*12)+(gapBetweenMachines*12); //move time line up and down       
        int axisX=border;
            
        g2d.drawLine(border, axisY, border+(int)(timeHorizon*xScale), axisY);
        for (int t=0;t<=timeHorizon;t++){
            if (t%axisUnit==0 || t==timeHorizon){
                g2d.drawLine(axisX+(int)(t*xScale), axisY-5, axisX+(int)(t*xScale), axisY+5);
                g2d.drawString(""+t, axisX+(int)(t*xScale), axisY+12);
            }
        }
        
        //draw due dates
			int dueDate = problemInstance.DueDate;
			g2d.setPaint(Color.red);
			g2d.drawLine(axisX+(int)(dueDate*xScale), border, axisX+(int)(dueDate*xScale), axisY+2*20);
			g2d.drawString("Due Date = "+dueDate, axisX+(int)(dueDate*xScale)-110, axisY+2*20);
//			g2d.drawString("Weighted Tardiness = "+problemInstance.tardiness, axisX+(int)(dueDate*xScale)-110, axisY+2*30);
			
//			g2d.drawString("weighted tardiness = "+tardiness, axisX+(int)(dueDate*xScale)+5, axisY+2*20);
//			g2d.drawString("Due Date = "+dueDate + ", Weighted Tardiness = " + problemInstance.tardiness, axisX+(int)(dueDate*xScale)+5, axisY+2*20);
//			g2d.drawString("Due Date = "+dueDate + ", Weighted Tardiness = " + problemInstance.tardiness, axisX+(int)(dueDate*xScale)-120, axisY+2*20);
    
			if (problemInstance.PerturbationList!= null)
	        drawPerturbations(g2d, xScale);
    
			
    }

    
    /**
     * Saves schedule to file
     * @param baseName
     */
    public void saveSchedule(String baseName) throws IOException {
        File imgFile = new File("Solutions/Solution-" + baseName + ".png");
        
        BufferedImage bi = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_ARGB);
        Graphics2D ig2 = bi.createGraphics();
     
        ig2.drawRect(0, 0, getWidth(), getHeight());
        ig2.setBackground(Color.lightGray);
       
        paintAll(ig2);
        ImageIO.write(bi, "PNG", imgFile);
    }
    
    
    /**
     * Draws an occupied time slot in the bar of the specified machine, with a specified start and end time. In
     * addition, you can specify border and fill color, a message, and whether this concerns an idle time slot.
     * If the time slot is idle, the height of the box is reduced. 
     * @param g2d         graphics object
     * @param xScale      X-axis scale
     * @param machine     the machine this time slot belongs to
     * @param startTime   start of the time slot
     * @param endTime     end of the time slot
     * @param fillColor   color of the inside of the slot
     * @param borderColor color of the border
     * @param idle        denotes whether this concerns an idle box
     * @param msg         message to be drawn inside the box
     */
    private void drawTimeBox(Graphics2D g2d, double xScale, MachineGUI machine, int startTime, int endTime, Color fillColor, Color borderColor, boolean idle, String msg) {
        int margin = idle ? 3 : 0; 
        int currentY = machineIdToCurrentYMap.get(machine.getId());
        g2d.setPaint(fillColor);
        g2d.fillRect(
                (int)(border+xScale*startTime), 
                currentY+margin, 
                (int)(xScale*(double)(endTime-startTime)), 
                machineUnitHeight-2*margin);
        
        g2d.setPaint(borderColor);
        g2d.drawRect(
                (int)(border+xScale*startTime), 
                currentY+margin, 
                (int)(xScale*(double)(endTime-startTime)), 
                machineUnitHeight-2*margin);
        
        // Draw text inside the box
        if(msg != null || msg != "") {
            g2d.setPaint(Color.black);
            g2d.drawString(msg, 
                    (int)(border + xScale*startTime)+4, 
                    (int)(currentY + ((double)machineUnitHeight/2.0)));
        }
        
    }
    
    
    private void drawSlack(Graphics2D g2d, double xScale, JobGUI job, MachineGUI machine, int fromTime, int slack){
    	if(slack == 0) return;
    	
    	//grey box??
        int currentY = machineIdToCurrentYMap.get(machine.getId());
        int x1 = (int)(border+xScale*fromTime);
        int x2 = (int)(border+xScale*(fromTime+slack));
        int y = (int)(currentY + ((double)machineUnitHeight/2.0));

        // color of the lag is a bit darker than the job color.
//        g2d.setPaint(jobColor(job).darker());
        g2d.setPaint(Color.black);

        g2d.drawLine(x1, y, x2, y);     // draw line
        g2d.drawLine(x2, y-5, x2, y+5); // draw bar at end of line
    	
    }

    /**
     * Draw the specified allocation on the Gantt-chart.
     * @param g2d         graphics object
     * @param xScale      X-axis scale
     * @param alloc  an operation allocation
     */
    private void drawAllocation(Graphics2D g2d, double xScale, OperationAllocation alloc) {
        JobGUI job = alloc.getOperation().getJob();
        // First, draw the setup time, if there is one
//        if (alloc.getSetupTime() != alloc.getStartTime()) {
//            drawTimeBox(
//                    g2d, xScale,
//                    alloc.getMachine(),
//                    alloc.getSetupTime(), alloc.getStartTime(),
//                    Color.gray, Color.gray,
//                    true,
//                    "");
//        }
        
        //draw slack
//        if (alloc.getOperation().getSlack()!=0){
//        	drawTimeBox(
//        			g2d, xScale,
//        			alloc.getMachine(),
//        			alloc.getEndTime(),
//        			alloc.getEndTime()+alloc.getOperation().getSlack(),
//        			Color.lightGray, Color.lightGray,
//        			true, ""
//        			);
//        }
        
        // Now draw the actual operation
        drawTimeBox(
                g2d, xScale, 
                alloc.getMachine(), 
                alloc.getStartTime(), alloc.getEndTime(), 
                jobColor(job), Color.black, 
                false,
                "J"+job.getId()+"-"+alloc.getOperation().getId());
        
     // Draw slack
        drawSlack(g2d, xScale, 
                job,
                alloc.getMachine(), 
                alloc.getEndTime(), 
                alloc.getOperation().getSlack());
//                job.getSlack(alloc.getMachine().getId()));
    }

    
    /**
     * Returns a unique color for each job.
     * @param job a job.
     * @return a unique color for the specified job.
     */
    private Color jobColor(JobGUI job) {
        if (!jobToColorMap.containsKey(job)) {
            Random rand = new Random(job.getId());
            Color color = new Color(rand.nextInt(255),rand.nextInt(255),rand.nextInt(255));
            
            jobToColorMap.put(job, color);
            return color;
        } else {
            return jobToColorMap.get(job);
        }
    }

	private void drawPerturbations(Graphics2D g2d, double xScale) {
		GradientPaint gradient = new GradientPaint(0, 0, Color.red, 0, 5, Color.yellow, true);
		
//		for (Perturbation perturbation:jspProblem.getPerturbationList()){
		for (Model.Perturbation perturbation:problemInstance.getPerturbationList()){
			
			
			int startTime=perturbation.getstartTime();
			int endTime=startTime + perturbation.getDuration();
			int currentY=machineIdToCurrentYMap.get(perturbation.getMachine());
//			int capacity = jspProblem.getMachineList().get(perturbation.getMachine()).getCapacity();
			
			Composite originalComposite = g2d.getComposite();
			g2d.setComposite(makeComposite(0.5f));
			
			g2d.setPaint(gradient);
			g2d.fillRect((int)(border+xScale*startTime), currentY, (int)(xScale*(double)(endTime-startTime)), machineUnitHeight);
			g2d.setPaint(Color.red);
			g2d.drawRect((int)(border+xScale*startTime), currentY, (int)(xScale*(double)(endTime-startTime)), machineUnitHeight);
			g2d.setPaint(Color.black);
			g2d.setComposite(originalComposite);
		}
		
	}
	
	  private AlphaComposite makeComposite(float alpha) {
		    int type = AlphaComposite.SRC_OVER;
		    return(AlphaComposite.getInstance(type, alpha));
		  }

    private void drawMachines(Graphics2D g2d, int timeHorizon, double xScale) {
        int currentX=border;
        int currentY=border;
        for (MachineGUI machine :problemInstance.getMachineList()){
            machineIdToCurrentYMap.put(machine.getId(), currentY);
            int machineId = machine.getId();
            int capacity = 1; //machine.getCapacity();
            g2d.drawString("M"+machineId, (int)((double)border/3.0), currentY+(int)((double)machineUnitHeight/2.0));
            for (int i=0;i<capacity;i++){
                g2d.drawRect(currentX, currentY, (int)(timeHorizon*xScale), machineUnitHeight);
                currentY+=machineUnitHeight;
            }
            currentY+=gapBetweenMachines;
        }
    }
}